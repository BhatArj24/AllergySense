
type User @aws_iam @aws_api_key {
  id: ID!
  email: AWSEmail
  username: String
  Allergies(filter: ModelAllergyFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAllergyConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Allergy @aws_iam @aws_api_key {
  id: ID!
  name: String
  severity: String
  userID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection @aws_api_key @aws_iam {
  items: [User]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserFilterInput {
  id: ModelIDInput
  email: ModelStringInput
  username: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

type Query {
  getUser(id: ID!): User @aws_api_key @aws_iam
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_api_key @aws_iam
  syncUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserConnection @aws_api_key @aws_iam
  getAllergy(id: ID!): Allergy @aws_api_key @aws_iam
  listAllergies(filter: ModelAllergyFilterInput, limit: Int, nextToken: String): ModelAllergyConnection @aws_api_key @aws_iam
  syncAllergies(filter: ModelAllergyFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelAllergyConnection @aws_api_key @aws_iam
  allergiesByUserID(userID: ID!, sortDirection: ModelSortDirection, filter: ModelAllergyFilterInput, limit: Int, nextToken: String): ModelAllergyConnection @aws_api_key @aws_iam
}

input ModelUserConditionInput {
  email: ModelStringInput
  username: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

input CreateUserInput {
  id: ID
  email: AWSEmail
  username: String
  _version: Int
}

input UpdateUserInput {
  id: ID!
  email: AWSEmail
  username: String
  _version: Int
}

input DeleteUserInput {
  id: ID!
  _version: Int
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  createAllergy(input: CreateAllergyInput!, condition: ModelAllergyConditionInput): Allergy @aws_api_key @aws_iam
  updateAllergy(input: UpdateAllergyInput!, condition: ModelAllergyConditionInput): Allergy @aws_api_key @aws_iam
  deleteAllergy(input: DeleteAllergyInput!, condition: ModelAllergyConditionInput): Allergy @aws_api_key @aws_iam
}

input ModelSubscriptionUserFilterInput {
  id: ModelSubscriptionIDInput
  email: ModelSubscriptionStringInput
  username: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
}

type Subscription {
  onCreateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["createUser"]) @aws_api_key @aws_iam
  onUpdateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["updateUser"]) @aws_api_key @aws_iam
  onDeleteUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["deleteUser"]) @aws_api_key @aws_iam
  onCreateAllergy(filter: ModelSubscriptionAllergyFilterInput): Allergy @aws_subscribe(mutations: ["createAllergy"]) @aws_api_key @aws_iam
  onUpdateAllergy(filter: ModelSubscriptionAllergyFilterInput): Allergy @aws_subscribe(mutations: ["updateAllergy"]) @aws_api_key @aws_iam
  onDeleteAllergy(filter: ModelSubscriptionAllergyFilterInput): Allergy @aws_subscribe(mutations: ["deleteAllergy"]) @aws_api_key @aws_iam
}

type ModelAllergyConnection @aws_iam @aws_api_key {
  items: [Allergy]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelAllergyFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  severity: ModelStringInput
  userID: ModelIDInput
  and: [ModelAllergyFilterInput]
  or: [ModelAllergyFilterInput]
  not: ModelAllergyFilterInput
}

input ModelAllergyConditionInput {
  name: ModelStringInput
  severity: ModelStringInput
  userID: ModelIDInput
  and: [ModelAllergyConditionInput]
  or: [ModelAllergyConditionInput]
  not: ModelAllergyConditionInput
}

input CreateAllergyInput {
  id: ID
  name: String
  severity: String
  userID: ID!
  _version: Int
}

input UpdateAllergyInput {
  id: ID!
  name: String
  severity: String
  userID: ID
  _version: Int
}

input DeleteAllergyInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionAllergyFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  severity: ModelSubscriptionStringInput
  userID: ModelSubscriptionIDInput
  and: [ModelSubscriptionAllergyFilterInput]
  or: [ModelSubscriptionAllergyFilterInput]
}

